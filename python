import math
from math import sqrt

#int i, j, k;
a = [[1.7, -1.1, 2.7],[-1.1, 1.6, -1.9], [2.7, -1.9, 4.5]]
b = [7.39, -3.36, 12.03]


n=3
#x[n]
#double l[n][n], y[n], sum;


# ---------------------- Processing Section - ---------------------
# Formation of L and U as factors of A, i.e., A = LU
for i in range(n):
   for j in range(n):
        l = [0][0]
        l[0][0]= sqrt(a[0][0])

for j in range(1,n):
    l[j][0] = a[j][0] / l[0][0]

for i in range(1,n):
    sum = 0.0
    for k in range(i-2):
        sum = sum + l[i][k] * l[i][k]
        l[i][i] = sqrt( a[i][i] - sum )

for j in range(i+1,n):
    sum= 0.0
    for k in range(i-2):
        sum = sum +l[i][k] * l[j][k]
        l[j][i] = (a[j][i]- sum ) / l[i][i]

# Forward substitution phase for solving LY=B

y[0] = b[0] / l[0][0]

for i in range(1,n):
    sum = 0.0
    for j in range(i-2):
        sum = sum + l[i][j] * y[j]
        y[i] = ( b[i]- sum ) / l[i][i]

# Back Substitution P h ase for solving L^T X=Y

x[n-1] = y[n-1] / l[n-1][n- 1]
for i in range(n-2,-1):
       sum= 0.0
       for j in range(i+1,n):
            sum =sum + l[j][i] * x[j]
            x[i]=(y[i]-sum )/l[i][i]

#---------------------- Output Section - -------- -------------//

print("The L matrix is")
for i in range(n):
     for j in range(n):
          print(l[i] [j])
          print(" ")
          print("\n")
print("\n")

print("The required solution is \n")

for i in range(n):
     print(x[i])

input()
